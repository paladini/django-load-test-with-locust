"""
Django management command para popular o banco de dados com dados de exemplo
Execute: python manage.py populate_db
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils.text import slugify
from blog.models import Category, Post
import random


class Command(BaseCommand):
    help = 'Popula o banco de dados com dados de exemplo para testes'

    def handle(self, *args, **options):
        self.stdout.write("üöÄ Iniciando popula√ß√£o do banco de dados...")
        
        # Criar superusu√°rio se n√£o existir
        if not User.objects.filter(username='admin').exists():
            admin = User.objects.create_superuser(
                username='admin',
                email='admin@blog.com',
                password='admin123'
            )
            self.stdout.write(self.style.SUCCESS("‚úÖ Superusu√°rio 'admin' criado (senha: admin123)"))
        else:
            admin = User.objects.get(username='admin')
            self.stdout.write("‚úÖ Superusu√°rio 'admin' j√° existe")
        
        # Criar usu√°rios adicionais
        authors = []
        author_names = ['joao', 'maria', 'carlos', 'ana', 'pedro']
        
        for name in author_names:
            if not User.objects.filter(username=name).exists():
                user = User.objects.create_user(
                    username=name,
                    email=f'{name}@blog.com',
                    password='password123',
                    first_name=name.title()
                )
                authors.append(user)
                self.stdout.write(self.style.SUCCESS(f"‚úÖ Usu√°rio '{name}' criado"))
            else:
                authors.append(User.objects.get(username=name))
        
        authors.append(admin)
        
        # Criar categorias
        categories_data = [
            {'name': 'Tecnologia', 'description': 'Posts sobre tecnologia e programa√ß√£o'},
            {'name': 'Django', 'description': 'Tutoriais e dicas sobre Django'},
            {'name': 'Performance', 'description': 'Otimiza√ß√£o e performance de aplica√ß√µes'},
            {'name': 'Testes', 'description': 'Testes de software e qualidade'},
            {'name': 'DevOps', 'description': 'Deploy, infraestrutura e opera√ß√µes'},
        ]
        
        categories = []
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                name=cat_data['name'],
                defaults={'description': cat_data['description']}
            )
            categories.append(category)
            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úÖ Categoria '{category.name}' criada"))
        
        # Criar posts de exemplo
        posts_data = [
            {
                'title': 'Primeiro Post do Blog',
                'content': '''Este √© o primeiro post do nosso blog Django! 
                
Estamos criando este conte√∫do para demonstrar como realizar testes de carga usando Locust. 

O Locust √© uma ferramenta fant√°stica para simular usu√°rios reais acessando sua aplica√ß√£o web. 
Com ele, podemos identificar gargalos de performance antes que eles afetem usu√°rios reais.

Neste post, vamos explorar:
- Como configurar testes b√°sicos
- M√©tricas importantes para monitorar
- Interpreta√ß√£o dos resultados

Continue acompanhando nosso blog para mais conte√∫dos sobre performance e testes!'''
            },
            {
                'title': 'Introdu√ß√£o ao Django',
                'content': '''Django √© um framework web de alto n√≠vel escrito em Python que encoraja o desenvolvimento r√°pido e limpo.

Principais caracter√≠sticas do Django:

1. **ORM Poderoso**: O Django inclui um Object-Relational Mapping que permite trabalhar com bancos de dados usando Python.

2. **Admin Interface**: Interface administrativa autom√°tica para gerenciar dados.

3. **Sistema de Templates**: Motor de templates flex√≠vel e poderoso.

4. **Sistema de URLs**: Roteamento de URLs limpo e elegante.

5. **Middleware**: Sistema de middleware para processamento de requests/responses.

Este blog foi constru√≠do com Django para demonstrar essas funcionalidades na pr√°tica!'''
            },
            {
                'title': 'Otimiza√ß√£o de Queries Django',
                'content': '''Um dos pontos mais importantes para performance em Django √© a otimiza√ß√£o de queries do banco de dados.

**Problemas Comuns:**

- **N+1 Queries**: Quando voc√™ acessa relacionamentos sem usar select_related/prefetch_related
- **Queries Desnecess√°rias**: Buscar dados que n√£o ser√£o utilizados
- **Falta de √çndices**: Queries lentas por falta de √≠ndices apropriados

**Solu√ß√µes:**

1. **select_related()**: Para relacionamentos ForeignKey e OneToOne
2. **prefetch_related()**: Para relacionamentos ManyToMany e reverse ForeignKey
3. **only()** e **defer()**: Para controlar quais campos buscar
4. **√çndices**: Adicionar √≠ndices apropriados nos modelos

Exemplo pr√°tico:
```python
# ‚ùå Ineficiente (N+1 queries)
posts = Post.objects.all()
for post in posts:
    print(post.author.username)  # Query para cada post

# ‚úÖ Eficiente (2 queries apenas)
posts = Post.objects.select_related('author')
for post in posts:
    print(post.author.username)
```

No nosso blog, implementamos duas vers√µes de cada view para demonstrar essa diferen√ßa!'''
            },
            {
                'title': 'Testes de Carga com Locust',
                'content': '''Locust √© uma ferramenta de teste de carga f√°cil de usar e escal√°vel.

**Por que usar Locust?**

- **Python**: Escreva testes em Python puro
- **Interface Web**: Monitore testes em tempo real
- **Distribu√≠do**: Execute testes em m√∫ltiplas m√°quinas
- **Flex√≠vel**: Simule comportamentos complexos de usu√°rios

**Conceitos B√°sicos:**

1. **HttpUser**: Classe base para simular usu√°rios
2. **@task**: Decorador para definir a√ß√µes dos usu√°rios
3. **wait_time**: Tempo de espera entre a√ß√µes
4. **weight**: Peso das tarefas (frequ√™ncia)

**Exemplo Simples:**
```python
from locust import HttpUser, task, between

class WebsiteUser(HttpUser):
    wait_time = between(1, 3)
    
    @task
    def index_page(self):
        self.client.get("/")
        
    @task(3)  # 3x mais prov√°vel
    def view_posts(self):
        self.client.get("/posts/")
```

**M√©tricas Importantes:**
- **RPS**: Requests per Second
- **Response Time**: Tempo de resposta m√©dio/percentis
- **Failure Rate**: Taxa de falhas
- **Concurrent Users**: Usu√°rios simult√¢neos

Com Locust, voc√™ pode identificar o limite de sua aplica√ß√£o antes que usu√°rios reais sejam impactados!'''
            },
            {
                'title': 'Monitoramento de Performance Django',
                'content': '''Monitorar a performance de aplica√ß√µes Django √© essencial para manter uma boa experi√™ncia do usu√°rio.

**Ferramentas de Monitoramento:**

1. **Django Debug Toolbar**: Para desenvolvimento
2. **Django Silk**: Profiling detalhado
3. **New Relic/Datadog**: Monitoramento em produ√ß√£o
4. **Sentry**: Tracking de erros

**M√©tricas Importantes:**

- **Response Time**: Tempo de resposta das views
- **Database Query Time**: Tempo gasto em queries
- **Memory Usage**: Uso de mem√≥ria
- **Error Rate**: Taxa de erros

**Django Settings para Performance:**

```python
# Cache
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
    }
}

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'CONN_MAX_AGE': 600,  # Persistent connections
    }
}

# Compression
MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',
    # ... other middleware
]
```

**Dicas de Otimiza√ß√£o:**

1. Use cache para dados que n√£o mudam frequentemente
2. Otimize queries com select_related/prefetch_related
3. Implemente pagina√ß√£o adequada
4. Use CDN para assets est√°ticos
5. Configure compress√£o gzip

Lembre-se: "Premature optimization is the root of all evil" - otimize apenas onde h√° necessidade comprovada!'''
            }
        ]
        
        # Criar posts
        created_posts = []
        for i, post_data in enumerate(posts_data):
            author = random.choice(authors)
            category = random.choice(categories)
            
            slug = slugify(post_data['title'])
            
            post, created = Post.objects.get_or_create(
                slug=slug,
                defaults={
                    'title': post_data['title'],
                    'content': post_data['content'],
                    'author': author,
                    'category': category,
                    'published': True,
                    'views_count': random.randint(10, 1000)
                }
            )
            
            if created:
                created_posts.append(post)
                self.stdout.write(self.style.SUCCESS(f"‚úÖ Post '{post.title}' criado"))
        
        # Criar posts adicionais para pagina√ß√£o
        lorem_content = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, 
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo."""
        
        for i in range(6, 51):  # Criar posts 6-50
            title = f"Post de Exemplo #{i}"
            slug = f"post-exemplo-{i}"
            
            if not Post.objects.filter(slug=slug).exists():
                author = random.choice(authors)
                category = random.choice(categories)
                
                post = Post.objects.create(
                    title=title,
                    slug=slug,
                    content=f"{lorem_content}\n\nEste √© o post n√∫mero {i} criado para demonstra√ß√£o de pagina√ß√£o e testes de carga.",
                    author=author,
                    category=category,
                    published=True,
                    views_count=random.randint(1, 500)
                )
                created_posts.append(post)
        
        self.stdout.write(self.style.SUCCESS(f"‚úÖ Total de {len(created_posts)} posts criados"))
        self.stdout.write(f"üìä Total de posts no banco: {Post.objects.count()}")
        self.stdout.write(f"üìÇ Total de categorias: {Category.objects.count()}")
        self.stdout.write(f"üë• Total de usu√°rios: {User.objects.count()}")
        
        self.stdout.write(self.style.SUCCESS("\nüéâ Banco de dados populado com sucesso!"))
        self.stdout.write("\nüìã Credenciais de acesso:")
        self.stdout.write("   Admin: admin / admin123")
        self.stdout.write("   Usu√°rios: joao, maria, carlos, ana, pedro / password123")
        
        self.stdout.write("\nüåê URLs para testar:")
        self.stdout.write("   Homepage: /")
        self.stdout.write("   Posts: /posts/")
        self.stdout.write("   Posts Otimizados: /posts/optimized/")
        self.stdout.write("   API: /api/posts/")
        self.stdout.write("   Admin: /admin/")
